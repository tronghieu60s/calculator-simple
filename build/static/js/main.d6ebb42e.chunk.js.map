{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","calculation","event","key","state","result","value","target","innerText","lastPositonCal","length","eval","setState","statusEqual","deleteOne","deleteCal","slice","lastPositionCal","deleteAll","calculator","darkMode","statusDarkMode","darkModeButton","localStorage","setItem","JSON","stringify","componentDidMount","parse","getItem","fun","addEventListener","keyCode","button","querySelectorAll","i","classList","add","remove","this","id","className","onClick","src","alt","toLocaleString","Component"],"mappings":"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","file":"static/js/main.d6ebb42e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport './App.css';\n\nexport class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      calculation: '',\n      result: 0,\n      statusEqual: false,\n      statusDarkMode: false\n    }\n  }\n\n  calculation = (event, key = 0) => {\n    let { calculation, result } = this.state;\n    let value;\n    if(key === 0){\n      value = event.target.innerText;\n    }else{\n      value = event.key;\n    }\n    let lastPositonCal = calculation[calculation.length - 1];\n    if (result !== 0) {\n      if (typeof lastPositonCal !== \"undefined\") {\n        if (lastPositonCal.match(/[+\\-*/%.]/)) {\n          if (!value.match(/[+\\-*/%.]/)) {\n            calculation += value;\n            result = eval(calculation);\n          }\n        } else {\n          if (!value.match(/[+\\-*/%.]/)) {\n            calculation += value;\n            result = eval(calculation);\n          } else {\n            calculation += value;\n          }\n        }\n      } else {\n        calculation += value;\n        result = value;\n      }\n    } else {\n      if (!value.match(/[*/%]/)) {\n        calculation += value;\n        result = value;\n      }\n    }\n    this.setState({\n      calculation,\n      result,\n      statusEqual: false\n    })\n  }\n\n  deleteOne = () => {\n    let { calculation, result } = this.state;\n    let deleteCal = calculation.slice(0, -1);\n    let lastPositionCal = deleteCal[deleteCal.length - 1];\n    if (typeof lastPositionCal !== \"undefined\") {\n      if (!lastPositionCal.match(/[+\\-*/%.]/)) {\n        result = eval(deleteCal);\n      }\n    } else {\n      result = 0;\n    }\n    calculation = deleteCal;\n    this.setState({\n      calculation,\n      result\n    })\n  }\n\n  deleteAll = () => {\n    this.setState({\n      calculation: '',\n      result: 0\n    })\n  }\n\n  calculator = () => {\n    let { statusEqual } = this.state;\n    if (statusEqual) {\n      this.setState({\n        result: 0,\n        statusEqual: false\n      })\n    } else {\n      this.setState({\n        statusEqual: true\n      })\n    }\n  }\n\n  darkMode = () => {\n    let {statusDarkMode} = this.state;\n    this.darkModeButton(!statusDarkMode);\n    this.setState({\n      statusDarkMode: !statusDarkMode\n    })\n    localStorage.setItem(\"DARKMODE-STATUS\",JSON.stringify(!statusDarkMode));\n  }\n\n  componentDidMount = () => {\n    let statusDarkMode = JSON.parse(localStorage.getItem(\"DARKMODE-STATUS\"));\n    let fun = this;\n    window.addEventListener(\"keydown\", function(event){\n      if(event.key.match(/[0-9+\\-*/%.]/)){\n        fun.calculation(event, 1);\n      }else if(event.key === \"Backspace\"){\n        fun.deleteOne();\n      }else if(event.key === \"Delete\"){\n        fun.deleteAll();\n      }else if(event.key === \"=\" || event.keyCode === 32){\n        fun.calculator();\n      }\n    })\n    this.darkModeButton(statusDarkMode);\n    this.setState({\n      statusDarkMode\n    })\n  }\n\n  darkModeButton = (statusDarkMode) => {\n    if(statusDarkMode){\n      let button = document.querySelectorAll(\".button:not(.sign):not(.equal)\");\n      for (let i = 0; i < button.length; i++) {\n        button[i].classList.add(\"dark\");\n      }\n    }else{\n      let button = document.querySelectorAll(\".button:not(.sign):not(.equal)\");\n      for (let i = 0; i < button.length; i++) {\n        button[i].classList.remove(\"dark\");\n      }\n    }\n  }\n\n  render() {\n    let { calculation, result, statusEqual, statusDarkMode } = this.state;\n    return (\n      <div id=\"wrap\" className={statusDarkMode ? 'dark' : ''}>\n        <div className={`calculator ${statusDarkMode ? 'dark' : ''}`}>\n          <div className=\"block-top\">\n            <div onClick={this.darkMode} id=\"bg-mode\"><img src={statusDarkMode ? 'icons/sunny.svg' : 'icons/moon.svg'} alt=\"\" /></div>\n            <div className={`calculation ${statusDarkMode ? 'dark' : ''}`}>{calculation}</div>\n            <div className={`result ${statusEqual ? 'equal' : ''} ${statusDarkMode ? 'dark' : ''}`}>{result.toLocaleString()}</div>\n          </div>\n          <div className=\"block-button\">\n            <div className=\"row\">\n              <div onClick={this.deleteOne} className=\"button delete\">C</div>\n              <div onClick={this.deleteAll} className=\"button delete-all\">AC</div>\n              <div onClick={this.calculation} className=\"button sign\">%</div>\n              <div onClick={this.calculation} className=\"button sign\">/</div>\n            </div>\n            <div className=\"row\">\n              <div onClick={this.calculation} className=\"button\">7</div>\n              <div onClick={this.calculation} className=\"button\">8</div>\n              <div onClick={this.calculation} className=\"button\">9</div>\n              <div onClick={this.calculation} className=\"button sign\">*</div>\n            </div>\n            <div className=\"row\">\n              <div onClick={this.calculation} className=\"button\">4</div>\n              <div onClick={this.calculation} className=\"button\">5</div>\n              <div onClick={this.calculation} className=\"button\">6</div>\n              <div onClick={this.calculation} className=\"button sign\">-</div>\n            </div>\n            <div className=\"row\">\n              <div onClick={this.calculation} className=\"button\">1</div>\n              <div onClick={this.calculation} className=\"button\">2</div>\n              <div onClick={this.calculation} className=\"button\">3</div>\n              <div onClick={this.calculation} className=\"button sign\">+</div>\n            </div>\n            <div className=\"row\">\n              <div onClick={this.calculation} className=\"button col2\">0</div>\n              <div onClick={this.calculation} className=\"button\">.</div>\n              <div onClick={this.calculator} className=\"button equal\">=</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}